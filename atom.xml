<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Anthony 'Colabo' Do]]></title>
  <link href="http://tonyduke.github.com/atom.xml" rel="self"/>
  <link href="http://tonyduke.github.com/"/>
  <updated>2012-07-14T17:29:48+08:00</updated>
  <id>http://tonyduke.github.com/</id>
  <author>
    <name><![CDATA[Anthony]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[科技生产管理中的'法治']]></title>
    <link href="http://tonyduke.github.com/blog/2012/07/14/administration-in-software-producting/"/>
    <updated>2012-07-14T17:25:00+08:00</updated>
    <id>http://tonyduke.github.com/blog/2012/07/14/administration-in-software-producting</id>
    <content type="html"><![CDATA[<blockquote><p>夫治法之至明者，任数不任人</p>

<pre><code>             ——韩非・制分
</code></pre></blockquote>

<p>科技生产活动中，每一个环节都是通过人与人、团队与团队、部门与部门之间的协作而运行的。每个参与者通过相互作用而创造科技生产物。或合作，或竞争，或讨论，或争辩。早期的软件开发独行侠时代，决定成败的关键可能是开发人员本身能力的高低；但现代的团队软件开发活动必定是由团队成员之间、团队与团队间的相互作用组成的。科技生产管理的重心，不仅仅是开发人员个体，更重要的是这些关系。</p>

<p>我们目前还处于软件开发管理的人治时代，由“人”来治理，治理的对象也是“人”。一个管理者水平的高低，取决于其管理能力、责任心、人格魅力以及交际能力等主观性极强的个人精神属性，而这些能力是很难通过领导训导，能力培训来提高的。而同样的被治理的“人”，即工程师，其生产效率的高低也是由类似的精神能力来决定的。这种现状，也就造成了同样的项目，同样的需求，使用同样的技术工具，但仅仅是因为生产者的不同，就造成了其生产成果千差万别。这种现状对于现代化的集中式大生产模式是不利的。这就像西式餐饮与中式餐饮的差别。西式餐饮之所以能够快速的高效的进行生产，就是其弱化了餐饮生产中人的因素，即忽略厨师的能力，任何一个人，通过标准化的培训，按照制定的食物生产规则，即可生产出标准的食物。而中式餐饮的难点就在于，厨师水平的高低，直接决定了食物的美味程度。而一个优秀的厨师的培养，是何其的困难。</p>

<p>由上述的例子可以看出，如何制定标准化的培训，制定标准化的生产规则，采用统一的生产工具，是以法治代替人治，提高生产效率的关键。除此之外，标准化的严格的质量管理，充满激励的生产活动</p>

<pre><code>一个团队中经常会充满了这样的争吵：
  “你这个test写得太复杂，我看不懂，建议重写！”
  “我不觉得复杂啊，是你看得不仔细”
  “你这个函数写得太大，test肯定无法cover所有分支！重写！”
  “靠，我已经用客户端测试过了，没有问题“
  ”客户端测试通过，但是test没有cover所有分支，这是不行的，难道每次修改这里都用客户端来测试这个函数有没有问题吗？这样代价很大，最后会导致无法修改！！“
  ”我test写那么完备，代码都无法按时提交了，这个责任谁来负担？“
  ”你test不写完备，代码耦合性太高，下次这块代码出了问题，责任你负担的起吗？“
  ……
  ……
  两人为此时吵了半天，最后吵到了项目经理那去了。项目经理一般有三种做法：
2B项目经理： ”我不懂技术，你们自己商量决定。不要耽误进度啊“

普通项目经理：” test要写完备，把test补全吧。“。写代码者不服，说出了种种理由。项目经理又和他辩论半天，实在无法说服，最后项目经理怒了：”我怎么说你就怎么做！“

优秀项目经理： ”test要写完备，一定要补全test“。说完之后就在项目review规则上补充三条规则：
1. test必须cover所有分支
2. test写得如果reviewer无法短时间看懂，需要重写。如果他人代码导致自己写的test失败，需要写test的人自己去修复，解除耦合性
3. 代码质量重于进度，质量不好在项目后期会导致致命后果，不得以进度为借口放弃质量。并且加上为什么这样规定的原因，之后，项目经理在代码提交流程上添加了代码测试覆盖率检查工具，没有达到覆盖率无法提交到git

第一种项目经理是无为而治。看上去是个好好先生，事实上是个吃闲饭的。看上去对每个人都好言好语，事实上对整个项目没有一点作用。一天到晚就是催进度。最后很有可能就是因为之前test写得不完整导致代码无法修改拖慢了进度，但是这种项目经理才不会管你呢，谁进度慢了，就是谁的责任。

第二种项目经理是人治。整体管理思路都对，个人权利无限大，但是无法让手下信服。有可能导致整天处于这种问题的纠缠之中。手下的质疑声不断，最后感觉自己管不了了。
第三种项目经理是法治。逐步完善项目管理中的各种问题。法律不全则修补漏斗，大家都有法可依，最后整个项目组走的路越来越顺畅，开发速度越来越快。
</code></pre>
]]></content>
  </entry>
  
</feed>
